# ===========================================
# SAP GRC Platform - Environment Configuration
# ===========================================

# -----------------
# Database
# -----------------
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/sapframework

# -----------------
# API Server
# -----------------
PORT=3000
NODE_ENV=development

# -----------------
# Authentication & Security
# -----------------
# CRITICAL: Set to 'true' in production!
AUTH_ENABLED=true

# JWT Secret (generate with: openssl rand -base64 32)
JWT_SECRET=CHANGE-THIS-IN-PRODUCTION-use-openssl-rand-base64-32

# XSUAA Configuration (SAP BTP)
# Auto-configured via VCAP_SERVICES when bound to xsuaa service in Cloud Foundry
# For local testing with XSUAA, extract from: cf env <app-name>
XSUAA_URL=
XSUAA_CLIENT_ID=
XSUAA_CLIENT_SECRET=

# Required Role Collections (assign to users in BTP Cockpit):
# - SAP_MVP_Framework_Admin: Full access (tenant admin)
# - SAP_MVP_Framework_Module_Manager: Module configuration
# - SAP_MVP_Framework_Auditor: Read-only audit access
# See docs/operative/AUTH_SETUP.md for detailed setup instructions

# Master Encryption Key (AES-256-GCM) - MUST be set in production
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
ENCRYPTION_MASTER_KEY=

# -----------------
# CORS Configuration
# -----------------
# Development: Allow frontend origin
CORS_ORIGIN=http://localhost:3001

# Production: Use your actual domain
# CORS_ORIGIN=https://your-production-domain.com

# -----------------
# Logging
# -----------------
LOG_LEVEL=debug

# -----------------
# SAP Connection (Optional - for testing)
# -----------------
SAP_BASE_URL=https://your-sap-system.com
SAP_CLIENT=100
SAP_AUTH_TYPE=OAUTH
SAP_CLIENT_ID=
SAP_CLIENT_SECRET=

# -----------------
# Frontend (Next.js)
# -----------------
NEXT_PUBLIC_API_URL=http://localhost:3000/api

# -----------------
# Redis (for rate limiting & caching)
# -----------------
# Optional: If not set, falls back to in-memory store
# Production: MUST use Redis for distributed rate limiting
REDIS_URL=

# -----------------
# Email Service (Brevo)
# -----------------
# Email provider: 'brevo' (REST API), 'smtp' (via Brevo SMTP relay), 'resend', or 'test'
# Test mode uses Ethereal (fake SMTP service) - no real emails sent
EMAIL_PROVIDER=brevo

# Brevo REST API Configuration (if EMAIL_PROVIDER=brevo)
# Sign up at https://brevo.com to get your API key
# Includes email, SMS, and marketing automation
BREVO_API_KEY=2yQTAWBGcnOUEDjh

# From address configuration
EMAIL_FROM_NAME=Prism
EMAIL_FROM_EMAIL=noreply@yourdomain.com

# Alternative: Brevo SMTP Relay (if EMAIL_PROVIDER=smtp)
# SMTP credentials provided by Brevo account
# Uncomment these to use Brevo via SMTP instead of REST API
# SMTP_HOST=smtp-relay.brevo.com
# SMTP_PORT=587
# SMTP_SECURE=false
# SMTP_USER=9a0708001@smtp-brevo.com
# SMTP_PASS=xsmtpsib-22152b79b9a6c50dd14d9e1edcd561366dcb1b543ef016800ca2f35325422972-nqomFUgsAIjHJBC

# Alternative: Resend Configuration (if EMAIL_PROVIDER=resend)
# Sign up at https://resend.com to get your API key
RESEND_API_KEY=

# Frontend base URL (for email links)
APP_BASE_URL=http://localhost:3001

# -----------------
# Security Features
# -----------------
# Enable SoD (Segregation of Duties) enforcement
SOD_ENFORCEMENT_ENABLED=true
SOD_ENFORCEMENT_FAIL_OPEN=false

# Audit logging
AUDIT_LOG_ENABLED=true
AUDIT_LOG_RETENTION_DAYS=365

# Data residency
DATA_RESIDENCY_ENABLED=true
DATA_RESIDENCY_DEFAULT_REGION=EU
DATA_RESIDENCY_FAIL_OPEN=false

# Encryption
ENCRYPTION_AT_REST_REQUIRED=true

# -----------------
# GDPR & Compliance
# -----------------
GDPR_PII_MASKING_ENABLED=true
GDPR_DATA_RETENTION_DAYS=2555
